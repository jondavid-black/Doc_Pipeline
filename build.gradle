plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building an application
    id 'application'
    
    // Apply the jacoco plugin for code coverage analysis
    id 'jacoco'
    
    // Apply the jdepend plugin for code dependency analysis
    id 'jdepend'
    
    // Apply the checkstyle plugin for code style static analysis
    id 'checkstyle'

    // Apply the spotbugs plugin for code static analysis
    id "com.github.spotbugs" version "2.0.0"

    // Apply the plantUML plugin for UML diagram generation
    id 'com.cosminpolifronie.gradle.plantuml' version '1.6.0'
}

repositories {
    jcenter() 
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
    testImplementation 'io.cucumber:cucumber-java:4.3.1' 
    testImplementation 'io.cucumber:cucumber-junit:4.3.1'
}

configurations {
    cucumberRuntime {
        extendsFrom testImplementation
    }
}

// Define the main class for the application
mainClassName = 'Driver'

plantUml {
    render input: 'src/design/plantuml/*.puml', output: 'design-document/img', format: 'png', withMetadata: false
}

test {
    useJUnitPlatform()
    reports {
        junitXml.enabled = true
        html.enabled = true
    }
}

jacoco {
    // toolVersion = "0.8.4"
    reportsDir = file("${buildDir}/reports/jacoco")
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.enabled true
        html.destination file("${buildDir}/reports/jacocoHtml")
    }
}

// task codeCoverageReport(type: JacocoReport) {
//     executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

//     subprojects.each {
//         sourceSets it.sourceSets.main
//     }

//     reports {
//         xml.enabled false
//         xml.destination "${buildDir}/reports/jacoco/report.xml"
//         html.enabled true
//         html.destination "${buildDir}/reports/jacocoHTML/report.xml"
//         csv.enabled false
//     }
// }

// codeCoverageReport.dependsOn {
//     subprojects*.test
// }

spotbugs {
  effort = "max"
  reportLevel = "low"
  includeFilter = file("config/findbugs/ExcludeFilter.xml")
}
tasks.withType(com.github.spotbugs.SpotBugsTask) {
  reports {
    xml.enabled = true
    html.enabled = false
  }
}

// jacocoTestReport {
//     reports {
//         xml.enabled false
//         html.enabled true
//     }
// }

task cucumber() {
    dependsOn assemble, compileTestJava
    doLast {
        javaexec {
            main = "cucumber.api.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = ['--plugin', 'json:build/reports/cucumber/cucumber.json', '--plugin', 'junit:build/reports/cucumber/cucumber-junit-report.xml', '--plugin', 'pretty:build/reports/cucumber/cucumber-pretty.txt', '--glue', 'org.do4d.eightball', 'src/test/resources']
        }
    }
}

task spellCheck() {
    doLast {
        new ByteArrayOutputStream().withStream { os ->
            def result = exec {
                executable = 'python'
                args = ['./src/tools/python/spell_check.py', './dictionary.dic', './design-document/_posts', './spelling_errors.json']
                standardOutput = os
            }
            ext.spellingErrors = os.toString()
            
            assert os.toString().length() == 0 : "Spelling errors exist in the document."
        }
    }
}